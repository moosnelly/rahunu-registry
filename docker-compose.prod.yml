# Production Docker Compose Configuration
# This file enforces production security requirements
# 
# Usage:
#   1. Create .env file with AUTH_SECRET and NEXTAUTH_URL (HTTPS required)
#   2. docker-compose -f docker-compose.prod.yml up -d
#
# Required .env variables:
#   AUTH_SECRET=<strong-secret-min-32-chars>
#   NEXTAUTH_URL=https://your-domain.com

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rahunu
      POSTGRES_USER: rahunu
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD environment variable is required}
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rahunu -d rahunu"]
      interval: 5s
      timeout: 5s
      retries: 10
    # Don't expose port in production - only accessible via docker network
    # ports:
    #   - "5432:5432"
    networks:
      - internal
    restart: unless-stopped

  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://rahunu:rahunu@db:5432/rahunu?schema=public&sslmode=disable
      AUTH_SECRET: ${AUTH_SECRET:?AUTH_SECRET environment variable is required}
      NEXTAUTH_URL: ${NEXTAUTH_URL:?NEXTAUTH_URL environment variable is required (must use HTTPS)}
      NODE_ENV: production
      UPLOAD_DIR: /app/storage/uploads
    # Port only exposed internally to nginx
    expose:
      - "3000"
    volumes:
      - uploads:/app/storage/uploads
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/auth/providers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot-www:/var/www/certbot:ro
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - internal

volumes:
  db:
    driver: local
  uploads:
    driver: local
  certbot-www:
    driver: local

networks:
  internal:
    driver: bridge

