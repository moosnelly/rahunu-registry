generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DATA_ENTRY
  VIEWER
}

enum Status {
  ONGOING
  CANCELLED
  COMPLETED
}

enum AuditAction {
  USER_CREATED
  USER_ROLE_CHANGED
  USER_PASSWORD_RESET
  USER_STATUS_CHANGED
  USER_SIGNED_IN
  ENTRY_CREATED
  ENTRY_UPDATED
  ENTRY_DELETED
  ENTRY_RESTORED
  ENTRY_VIEWED
  SETTINGS_UPDATED
}

enum SettingCategory {
  ISLAND
  BANK_BRANCH
  REGION
  DOCUMENT_TYPE
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  passwordHash   String?
  role           Role           @default(VIEWER)
  image          String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  entriesCreated RegistryEntry[] @relation("createdByUser")
  entriesUpdated RegistryEntry[] @relation("updatedByUser")
  auditActor     AuditLog[]     @relation("audit_actor")
  auditTarget    AuditLog[]     @relation("audit_target_user")
}

model RegistryEntry {
  id               String       @id @default(cuid())
  no               Int          @unique
  address          String
  island           String
  formNumber       String
  date             DateTime
  branch           String
  agreementNumber  String
  status           Status
  loanAmount       Decimal
  dateOfCancelled  DateTime?
  dateOfCompleted  DateTime?
  attachments      Json?
  borrowers        Borrower[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isDeleted        Boolean      @default(false)
  deletedAt        DateTime?
  createdById      String?
  updatedById      String?
  createdBy        User?        @relation("createdByUser", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy        User?        @relation("updatedByUser", fields: [updatedById], references: [id], onDelete: SetNull)
  auditLogs        AuditLog[]   @relation("audit_target_entry")
}

model Borrower {
  id               String        @id @default(cuid())
  fullName         String
  nationalId       String
  registryEntry    RegistryEntry @relation(fields: [registryEntryId], references: [id])
  registryEntryId  String

  @@index([nationalId])
}

model AuditLog {
  id             String         @id @default(cuid())
  action         AuditAction
  actorId        String?
  actor          User?          @relation("audit_actor", fields: [actorId], references: [id], onDelete: SetNull)
  targetUserId   String?
  targetUser     User?          @relation("audit_target_user", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetEntryId  String?
  targetEntry    RegistryEntry? @relation("audit_target_entry", fields: [targetEntryId], references: [id], onDelete: SetNull)
  details        String?
  createdAt      DateTime       @default(now())

  @@index([action, createdAt])
  @@index([targetUserId, createdAt])
  @@index([targetEntryId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SystemSetting {
  id          String          @id @default(cuid())
  category    SettingCategory
  value       String
  displayName String?
  isActive    Boolean         @default(true)
  sortOrder   Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([category, value])
  @@index([category, isActive])
}
